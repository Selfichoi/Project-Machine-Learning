# -*- coding: utf-8 -*-
"""appp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n3rNuKkWdI58I9LqqNNeQK_QA4uNCRpc
"""

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import numpy as np

st.set_page_config(page_title="ML Sales Dashboard", layout="wide")

# Load data
@st.cache_data
def load_data():
    df = pd.read_csv("sales_data_sample.csv", encoding="latin1")
    df['ORDERDATE'] = pd.to_datetime(df['ORDERDATE'], errors='coerce')
    return df

df = load_data()

# Sidebar
st.sidebar.title("Menu")
page = st.sidebar.radio("Pilih halaman", [
    "ðŸ“Š EDA",
    "ðŸ“¦ RFM Analysis",
    "ðŸ¤– Modeling",
    "ðŸ“ˆ Forecasting"
])

# =================== PAGE: EDA ===================
if page == "ðŸ“Š EDA":
    st.title("ðŸ“Š Exploratory Data Analysis (EDA)")

    # Sales per Month
    df['Month'] = df['ORDERDATE'].dt.month
    monthly_sales = df.groupby('Month')['SALES'].sum()

    st.subheader("Total Sales per Bulan")
    fig1, ax1 = plt.subplots()
    sns.lineplot(x=monthly_sales.index, y=monthly_sales.values, marker='o', ax=ax1)
    ax1.set_title("Total Sales per Bulan")
    st.pyplot(fig1)

    # Top 10 Countries
    st.subheader("Top 10 Negara Berdasarkan Penjualan")
    country_sales = df.groupby('COUNTRY')['SALES'].sum().sort_values(ascending=False).head(10)
    fig2, ax2 = plt.subplots()
    sns.barplot(x=country_sales.values, y=country_sales.index, ax=ax2)
    st.pyplot(fig2)

    # Product Line Boxplot
    st.subheader("Distribusi Penjualan per Product Line")
    fig3, ax3 = plt.subplots(figsize=(10, 5))
    sns.boxplot(x='PRODUCTLINE', y='SALES', data=df, ax=ax3)
    ax3.set_xticklabels(ax3.get_xticklabels(), rotation=45)
    st.pyplot(fig3)

    # Correlation Heatmap
    st.subheader("Korelasi Fitur Numerik")
    fig4, ax4 = plt.subplots()
    sns.heatmap(df[['QUANTITYORDERED', 'PRICEEACH', 'SALES']].corr(), annot=True, cmap='coolwarm', ax=ax4)
    st.pyplot(fig4)

# =================== PAGE: RFM ===================
elif page == "ðŸ“¦ RFM Analysis":
    st.title("ðŸ“¦ RFM Customer Segmentation")

    snapshot_date = df['ORDERDATE'].max() + pd.Timedelta(days=1)
    rfm = df.groupby('CUSTOMERNAME').agg({
        'ORDERDATE': lambda x: (snapshot_date - x.max()).days,
        'ORDERNUMBER': 'nunique',
        'SALES': 'sum'
    }).reset_index()

    rfm.columns = ['Customer', 'Recency', 'Frequency', 'Monetary']

    rfm['R_Score'] = pd.qcut(rfm['Recency'], 4, labels=[4, 3, 2, 1])
    rfm['F_Score'] = pd.qcut(rfm['Frequency'].rank(method='first'), 4, labels=[1, 2, 3, 4])
    rfm['M_Score'] = pd.qcut(rfm['Monetary'], 4, labels=[1, 2, 3, 4])

    rfm['RFM_Segment'] = rfm['R_Score'].astype(str) + rfm['F_Score'].astype(str) + rfm['M_Score'].astype(str)
    rfm['RFM_Score'] = rfm[['R_Score', 'F_Score', 'M_Score']].sum(axis=1)

    def segment_customer(score):
        if score >= 9:
            return 'Best Customers'
        elif score >= 7:
            return 'Loyal Customers'
        elif score >= 5:
            return 'Potential Loyalist'
        else:
            return 'At Risk'

    rfm['Segment'] = rfm['RFM_Score'].apply(segment_customer)

    st.dataframe(rfm.head())

    st.subheader("Distribusi Customer per Segment")
    fig, ax = plt.subplots()
    sns.countplot(x='Segment', data=rfm, order=rfm['Segment'].value_counts().index, ax=ax)
    st.pyplot(fig)

# =================== PAGE: MODELING ===================
elif page == "ðŸ¤– Modeling":
    st.title("ðŸ¤– Classification Modeling")

    # Preprocessing
    df_model = df.copy()
    df_model.dropna(subset=['DEALSIZE'], inplace=True)

    label_enc = LabelEncoder()
    df_model['Target_enc'] = label_enc.fit_transform(df_model['DEALSIZE'])

    drop_cols = ['ORDERNUMBER', 'CUSTOMERNAME', 'CONTACTLASTNAME', 'CONTACTFIRSTNAME',
                 'PHONE', 'ADDRESSLINE1', 'ADDRESSLINE2', 'POSTALCODE', 'ORDERDATE', 'DEALSIZE']
    df_model.drop(columns=drop_cols, inplace=True)

    X = pd.get_dummies(df_model.drop('Target_enc', axis=1), drop_first=True)
    y = df_model['Target_enc']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

    scaler = StandardScaler()
    X_train[X_train.columns] = scaler.fit_transform(X_train)
    X_test[X_test.columns] = scaler.transform(X_test)

    # Modeling
    logreg = LogisticRegression(max_iter=1000)
    rf = RandomForestClassifier(n_estimators=100, random_state=42)

    logreg.fit(X_train, y_train)
    rf.fit(X_train, y_train)

    y_pred_log = logreg.predict(X_test)
    y_pred_rf = rf.predict(X_test)

    st.subheader("Hasil Logistic Regression")
    st.text(classification_report(y_test, y_pred_log, target_names=label_enc.classes_))

    st.subheader("Hasil Random Forest")
    st.text(classification_report(y_test, y_pred_rf, target_names=label_enc.classes_))

# =================== PAGE: FORECAST ===================
elif page == "ðŸ“ˆ Forecasting":
    st.title("ðŸ“ˆ Forecasting Penjualan")

    from statsmodels.tsa.statespace.sarimax import SARIMAX
    from statsmodels.tsa.seasonal import seasonal_decompose

    monthly_sales = df.set_index('ORDERDATE').resample('M')['SALES'].sum()
    train = monthly_sales[:-6]
    test = monthly_sales[-6:]

    model = SARIMAX(train, order=(1,1,1), seasonal_order=(1,1,1,12))
    result = model.fit(disp=False)
    forecast = result.predict(start=test.index[0], end=test.index[-1])

    st.subheader("Forecast vs Actual Sales")
    fig, ax = plt.subplots(figsize=(12, 5))
    ax.plot(train, label='Train')
    ax.plot(test, label='Actual')
    ax.plot(forecast, label='Forecast')
    ax.legend()
    st.pyplot(fig)